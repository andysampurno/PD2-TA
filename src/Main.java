
import java.util.ArrayList;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author Reyhan
 */
class State {

    int[][] board;
}

public class Main extends javax.swing.JFrame {

    static final int EMPTY = 0;
    static final int SIZE = 9;
    public int[][] board = new int[SIZE][SIZE];

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        tblBoard = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnSolve = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tblBoard.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {"", null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null, null, null}
            },
            new String [] {
                "", "", "", "", "", "", "", "", ""
            }
        ));
        jScrollPane1.setViewportView(tblBoard);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Sudoku Solver");

        btnSolve.setText("Solve");
        btnSolve.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSolveActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(10, 10, 10)
                                .addComponent(btnSolve)))))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 161, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnSolve)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSolveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSolveActionPerformed
        // TODO add your handling code here:
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                try{
                if (tblBoard.getValueAt(i, j) != null) {
                    board[i][j] = Integer.parseInt(tblBoard.getValueAt(i, j).toString());
                } else {
                    board[i][j] = 0;
                }
                } catch(Exception e) {
                    System.out.println(i);
                    System.out.println(j);
                    System.out.println(Integer.parseInt(tblBoard.getValueAt(i, j).toString()));
                    throw e;
                }
            }
        }
        ArrayList<State> evaluated = new ArrayList<State>();
        ArrayList<State> possibility = new ArrayList<State>();
        State problemState = new State();
        problemState.board = board;
        evaluated.add(problemState);
        evaluate(evaluated, possibility);
        while (isHaveZero(evaluated.get(evaluated.size() - 1).board)) {
            evaluate(evaluated, possibility);
        }
        int[][] a = evaluated.get(evaluated.size() - 1).board;
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                tblBoard.setValueAt(a[i][j], i, j);
            }
        }
    }//GEN-LAST:event_btnSolveActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Main.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Main().setVisible(true);
            }
        });
    }

    public void evaluate(ArrayList<State> qEvaluated, ArrayList<State> qPossibility) {
        State lastEvaluatedState = qEvaluated.get(qEvaluated.size() - 1);
        int[][] lastBoard = lastEvaluatedState.board;
        ArrayList<int[][]> pBoard = findPosibilityBoard(lastBoard);
        for (int i = 0; i < pBoard.size(); i++) {
            if (isNoDuplicate(pBoard.get(i))) {
                State pState = new State();
                pState.board = pBoard.get(i);
                qPossibility.add(pState);
            }
        }

        if (qPossibility.size() > 0) {
            State firstPossibility = qPossibility.get(0);
            qPossibility.remove(0);
            qEvaluated.add(firstPossibility);
        }
    }

    public ArrayList<Integer> findPosibilityNumber(int[][] board) {
        ArrayList<Integer> pNumber = new ArrayList<Integer>();
        int zeroRow = findZeroRow(board);
        int zeroCol = findZeroCol(board);
        for (int number = 1; number <= SIZE; number++) {
            if (isOk(zeroRow, zeroCol, number)) {
                pNumber.add(number);
            }
        }
        return pNumber;
    }

    public ArrayList<int[][]> findPosibilityBoard(int[][] board) {
        ArrayList<int[][]> pBoard = new ArrayList<int[][]>();
        ArrayList<Integer> pNumber = findPosibilityNumber(board);
        int zeroRow = findZeroRow(board);
        int zeroCol = findZeroCol(board);
        for (int i = 0; i < pNumber.size(); i++) {
            int[][] newBoard = new int[9][9];
            for (int j = 0; j < SIZE; j++) {
                for (int k = 0; k < SIZE; k++) {
                    if (j == zeroRow && k == zeroCol) {
                        newBoard[j][k] = pNumber.get(i);
                    } else {
                        newBoard[j][k] = board[j][k];
                    }
                }
            }
            pBoard.add(newBoard);
        }
        return pBoard;
    }

    public boolean checkRow(int row, int number) {
        for (int i = 0; i < SIZE; i++) {
            if (board[row][i] == number) {
                return true;
            }
        }
        return false;
    }

    public boolean checkCol(int col, int number) {
        for (int i = 0; i < SIZE; i++) {
            if (board[i][col] == number) {
                return true;
            }
        }
        return false;
    }

    public boolean checkBox(int row, int col, int number) {
        int r = row - row % 3;
        int c = col - col % 3;
        for (int i = r; i < r + 3; i++) {
            for (int j = c; j < c + 3; j++) {
                if (board[i][j] == number) {
                    return true;
                }
            }
        }
        return false;
    }

    public boolean isOk(int row, int col, int number) {
        return !checkBox(row, col, number) && !checkRow(row, number) && !checkCol(col, number);
    }

    public static boolean checkDuplicateRow(int[][] board) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[j][i] != 0) {
                    for (int k = 0; k < SIZE; k++) {
                        if (j != k) {
                            if (board[j][i] == board[k][i]) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    public static boolean checkDuplicateCol(int[][] board) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] != 0) {
                    for (int k = 0; k < SIZE; k++) {
                        if (j != k) {
                            if (board[i][j] == board[i][k]) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    public static boolean checkDuplicateBox(int[][] board) {
        for (int i = 0; i < SIZE; i = i += 3) {
            for (int j = 0; j < SIZE; j += 3) {
                for (int k = i; k < i + 3; k++) {
                    for (int l = j; l < j + 3; l++) {
                        if (board[k][l] != 0) {
                            int count = 0;
                            for (int m = i; m < i + 3; m++) {
                                for (int n = j; n < j + 3; n++) {
                                    if (board[k][l] == board[m][n]) {
                                        count = count + 1;
                                    }
                                }
                            }
                            if (count > 1) {
                                return true;
                            }
                        }
                    }
                }
            }
        }
        return false;
    }

    public static boolean isNoDuplicate(int[][] board) {
        return !checkDuplicateBox(board) && !checkDuplicateRow(board) && !checkDuplicateCol(board);
    }

    public static int findZeroRow(int[][] board) {
        for (int rowIndex = 0; rowIndex < board.length; rowIndex++) {
            for (int colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {
                if (board[rowIndex][colIndex] == 0) {
                    return rowIndex;
                }
            }
        }
        return -1;
    }

    public static int findZeroCol(int[][] board) {
        for (int rowIndex = 0; rowIndex < board.length; rowIndex++) {
            for (int colIndex = 0; colIndex < board[rowIndex].length; colIndex++) {
                if (board[rowIndex][colIndex] == 0) {
                    return colIndex;
                }
            }
        }
        return -1;
    }

    public static boolean isHaveZero(int[][] board) {
        for (int i = 0; i < SIZE; i++) {
            for (int j = 0; j < SIZE; j++) {
                if (board[i][j] == EMPTY) {
                    return true;
                }
            }
        }
        return false;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnSolve;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable tblBoard;
    // End of variables declaration//GEN-END:variables
}
